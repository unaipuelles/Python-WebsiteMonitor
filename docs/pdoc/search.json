[{"fullname": "main", "modulename": "main", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "main.validate_conf", "modulename": "main", "qualname": "validate_conf", "type": "function", "doc": "<p>Validates the config file of the app</p>\n\n<p>Validates also the paths that are set</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conf</strong> (ConfigParser):\nConfiguration file loaded</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DefaultConfigPathError</strong>: If the paths does not exist</li>\n<li><strong>DefaultConfigError</strong>: If the default configuration does not exist</li>\n</ul>\n", "parameters": ["conf"], "funcdef": "def"}, {"fullname": "main.conf_to_dict", "modulename": "main", "qualname": "conf_to_dict", "type": "function", "doc": "<p>Transforms configParser into a dict with all the configurations</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conf</strong> (ConfigParser):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>conf_dict</strong> (dict):\nDict with all the configurations</li>\n</ul>\n", "parameters": ["conf"], "funcdef": "def"}, {"fullname": "main.log_init", "modulename": "main", "qualname": "log_init", "type": "function", "doc": "<p>Init root logger with file and console output</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>log_config</strong> (dict):\nData with the log options</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>root_logger</strong> (LogRecord):\nRoot logger</li>\n</ul>\n", "parameters": ["log_config"], "funcdef": "def"}, {"fullname": "WebChecker", "modulename": "WebChecker", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "WebChecker.WebChecker", "modulename": "WebChecker", "qualname": "WebChecker", "type": "class", "doc": "<p>A class that get the response from the url.</p>\n\n<h2 id=\"methods\">Methods</h2>\n"}, {"fullname": "WebChecker.WebChecker.__init__", "modulename": "WebChecker", "qualname": "WebChecker.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "WebChecker.WebChecker.site_status", "modulename": "WebChecker", "qualname": "WebChecker.site_status", "type": "function", "doc": "<p>Retrieve web response</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong> (str):\nUrl for doing the request</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>extracted_data</strong> (dict):\nAvailability, status code, response time and actual time</li>\n</ul>\n", "parameters": ["url"], "funcdef": "def"}, {"fullname": "Controller", "modulename": "Controller", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Controller.Controller", "modulename": "Controller", "qualname": "Controller", "type": "class", "doc": "<p>A class that controls the model and the view</p>\n\n<p>Also has all the logic of the web monitor running</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>model</strong> (Object):\nobject of the model that we will use</li>\n<li><strong>view</strong> (str):\nobject of the view that we will use</li>\n<li><strong>webs</strong> (list):\na list of all the Web objects that we will use to monitor</li>\n<li><strong>log</strong> (LogRecord):\nlog object</li>\n<li><strong>start_time</strong> (Time):\nvariable that we will use to know the start time to show the stats in the output</li>\n</ul>\n"}, {"fullname": "Controller.Controller.__init__", "modulename": "Controller", "qualname": "Controller.__init__", "type": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong> (Object):\nModel that we will use</li>\n<li><strong>view</strong> (Object):\nobject of the view that we will use</li>\n<li><strong>webs_data</strong> (dict):\nAll the data of the webs</li>\n</ul>\n", "parameters": ["self", "model", "view", "webs_data"], "funcdef": "def"}, {"fullname": "exceptions", "modulename": "exceptions", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "exceptions.config_exceptions", "modulename": "exceptions.config_exceptions", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "exceptions.config_exceptions.DefaultConfigError", "modulename": "exceptions.config_exceptions", "qualname": "DefaultConfigError", "type": "class", "doc": "<p>Exception raised for errors in config file: Default section does not exist</p>\n"}, {"fullname": "exceptions.config_exceptions.DefaultConfigError.__init__", "modulename": "exceptions.config_exceptions", "qualname": "DefaultConfigError.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "exceptions.config_exceptions.DefaultConfigPathError", "modulename": "exceptions.config_exceptions", "qualname": "DefaultConfigPathError", "type": "class", "doc": "<p>Exception raised for errors in config file: Paths are incorrect</p>\n"}, {"fullname": "exceptions.config_exceptions.DefaultConfigPathError.__init__", "modulename": "exceptions.config_exceptions", "qualname": "DefaultConfigPathError.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "exceptions.generic_exception", "modulename": "exceptions.generic_exception", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "exceptions.generic_exception.Error", "modulename": "exceptions.generic_exception", "qualname": "Error", "type": "class", "doc": "<p>Base class for exceptions in this module.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>message</strong> (str):\nMessage that will output the exception</li>\n</ul>\n"}, {"fullname": "exceptions.generic_exception.Error.__init__", "modulename": "exceptions.generic_exception", "qualname": "Error.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "message"], "funcdef": "def"}, {"fullname": "exceptions.generic_exception.Error.print_message", "modulename": "exceptions.generic_exception", "qualname": "Error.print_message", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "exceptions.web_exception", "modulename": "exceptions.web_exception", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "exceptions.web_exception.WebObjectCreateException", "modulename": "exceptions.web_exception", "qualname": "WebObjectCreateException", "type": "class", "doc": "<p>Exception raised with a dict without the necessary parameters for the Web Class</p>\n"}, {"fullname": "exceptions.web_exception.WebObjectCreateException.__init__", "modulename": "exceptions.web_exception", "qualname": "WebObjectCreateException.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "Web", "modulename": "Web", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "Web.Web", "modulename": "Web", "qualname": "Web", "type": "class", "doc": "<p>A class with the Web data and the statistics calculation.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>_name</strong> (str):\nName of the web page</li>\n<li><strong>_interval</strong> (int):\nInterval for web page monitoring</li>\n<li><strong>_url</strong> (str):\nUrl of the web page</li>\n<li><strong>_status</strong> (bool):\nStatus of the web page. True=Up, False=Down</li>\n<li><strong>_availability</strong> (float):\nCalculated availability for the last 2 minutes</li>\n<li><strong>_responses</strong> (list):\nList of responses of the request made</li>\n<li><strong>Methods</strong></li>\n</ul>\n\n<hr />\n"}, {"fullname": "Web.Web.__init__", "modulename": "Web", "qualname": "Web.__init__", "type": "function", "doc": "<p>Init class</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kwargs</strong> (dict):\nname, interval and url dictionary</li>\n</ul>\n", "parameters": ["self", "kwargs"], "funcdef": "def"}, {"fullname": "Web.Web.name", "modulename": "Web", "qualname": "Web.name", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "Web.Web.interval", "modulename": "Web", "qualname": "Web.interval", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "Web.Web.url", "modulename": "Web", "qualname": "Web.url", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "Web.Web.status", "modulename": "Web", "qualname": "Web.status", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "Web.Web.availability", "modulename": "Web", "qualname": "Web.availability", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "Web.Web.responses", "modulename": "Web", "qualname": "Web.responses", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "Web.Web.add_response", "modulename": "Web", "qualname": "Web.add_response", "type": "function", "doc": "<p>Add response data to the object</p>\n\n<p>Also calculates availability for the last 2 minutes</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>response</strong> (dict):\nWeb data response</li>\n</ul>\n", "parameters": ["self", "response"], "funcdef": "def"}, {"fullname": "Web.Web.set_down", "modulename": "Web", "qualname": "Web.set_down", "type": "function", "doc": "<p>Set web as down</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "Web.Web.set_up", "modulename": "Web", "qualname": "Web.set_up", "type": "function", "doc": "<p>Set web as up</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "Web.Web.responses_from_time", "modulename": "Web", "qualname": "Web.responses_from_time", "type": "function", "doc": "<p>Get newer responses than the time passed</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>from_time</strong> (datetime.datetime):\nResponses older time</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>responses</strong> (list):\nResponses list</li>\n</ul>\n", "parameters": ["self", "from_time"], "funcdef": "def"}, {"fullname": "Web.Web.calculate_stats", "modulename": "Web", "qualname": "Web.calculate_stats", "type": "function", "doc": "<p>Calculate response avg, response codes count and availability from the time passed</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>from_time</strong> (datetime.datetime):\nResponses older time</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>responses</strong> (list):\nResponses list</li>\n</ul>\n", "parameters": ["self", "from_time"], "funcdef": "def"}, {"fullname": "ConsoleView", "modulename": "ConsoleView", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "ConsoleView.ConsoleView", "modulename": "ConsoleView", "qualname": "ConsoleView", "type": "class", "doc": "<p>A class that prints the data to console prompt</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>out</strong> (LogRecord):\nConsole output</li>\n<li><strong>Methods</strong></li>\n</ul>\n\n<hr />\n"}, {"fullname": "ConsoleView.ConsoleView.__init__", "modulename": "ConsoleView", "qualname": "ConsoleView.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "ConsoleView.ConsoleView.show_response", "modulename": "ConsoleView", "qualname": "ConsoleView.show_response", "type": "function", "doc": "<p>Print all webs stats</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>web_stats</strong> (dict):\nStats of all the webs</li>\n<li><strong>time_from</strong> (datetime.datetime):\nTime from the stats are calculated</li>\n</ul>\n", "parameters": ["self", "web_stats", "time_from"], "funcdef": "def"}, {"fullname": "ConsoleView.ConsoleView.web_available", "modulename": "ConsoleView", "qualname": "ConsoleView.web_available", "type": "function", "doc": "<p>Print website available</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>web_name</strong> (str):\nName of the web</li>\n<li><strong>actual_time</strong> (datetime.datetime):\nDate when the status changed</li>\n</ul>\n", "parameters": ["self", "web_name", "actual_time"], "funcdef": "def"}, {"fullname": "ConsoleView.ConsoleView.web_not_available", "modulename": "ConsoleView", "qualname": "ConsoleView.web_not_available", "type": "function", "doc": "<p>Print website not available</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>web_name</strong> (str):\nName of the web</li>\n<li><strong>availability</strong> (float):\nAvailability of the web</li>\n<li><strong>actual_time</strong> (datetime.datetime):\nDate when the status changed</li>\n</ul>\n", "parameters": ["self", "web_name", "availability", "actual_time"], "funcdef": "def"}]